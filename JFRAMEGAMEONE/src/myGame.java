
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Polygon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.Random;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 16Zhangjt
 */
public class myGame extends javax.swing.JFrame implements KeyListener, MouseListener, MouseMotionListener, ActionListener {

    /**
     * Creates new form myGame
     */
    Random r = new Random();
    private int x1 = 100, y1 = 100, R = r.nextInt(256), G = r.nextInt(256), B = r.nextInt(256);
    private int mouseposX = 0, mouseposY = 0;
    private double angle = 0.0;
    boolean isClick = false;
    private Polygon rocket = new Polygon();
    Timer t;

    public myGame() {
        super("Game v1");
        initComponents();
        this.addKeyListener(this);
        this.setSize(500, 500);
        this.addMouseListener(this);
        this.addMouseMotionListener(this);
        makeRocket(x1, y1, angle);
        ActionListener action = new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                doaction(ae);
            }
        };
        t = new Timer(10, action);
        t.start();

    }

    private void doaction(ActionEvent event) {
        if (isClick) {
            x1 += (mouseposX - x1) / 10;
            y1 += (mouseposY - y1) / 10;
        } else {
            x1 += (mouseposX - x1) / 50;
            y1 += (mouseposY - y1) / 50;
        }

        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(myGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(myGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(myGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(myGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new myGame().setVisible(true);
            }
        });
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        g.setColor(new Color(R, G, B));
        makeRocket(x1, y1, angle);
        g.fillPolygon(rocket);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void keyTyped(KeyEvent ke) {

    }

    @Override
    public void keyPressed(KeyEvent ke) {
        if (ke.getKeyCode() == KeyEvent.VK_UP) {
            y1 -= 10;
        } else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {
            y1 += 10;
        } else if (ke.getKeyCode() == KeyEvent.VK_LEFT) {
            x1 -= 10;
        } else if (ke.getKeyCode() == KeyEvent.VK_RIGHT) {
            x1 += 10;
        }
        repaint();
    }

    @Override
    public void keyReleased(KeyEvent ke) {

    }

    @Override
    public void mouseClicked(MouseEvent me) {
        R = r.nextInt(256);
        G = r.nextInt(256);
        B = r.nextInt(256);
        repaint();
    }

    @Override
    public void mousePressed(MouseEvent me) {
        isClick = true;
        repaint();
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        isClick = false;
        repaint();
    }

    @Override
    public void mouseEntered(MouseEvent me) {

    }

    @Override
    public void mouseExited(MouseEvent me) {

    }

    private void makeRocket(int x, int y, double a) {
        rocket.reset();
        rocket.addPoint((int) (x), (int) (y));
        rocket.addPoint((int) (x + (7) * Math.cos(a) - (10) * Math.sin(a)), (int) (y + (7) * Math.sin(a) + (10) * Math.cos(a)));
        rocket.addPoint((int) (x + (7) * Math.cos(a) - (35) * Math.sin(a)), (int) (y + (7) * Math.sin(a) + (35) * Math.cos(a)));
        rocket.addPoint((int) (x + (15) * Math.cos(a) - (40) * Math.sin(a)), (int) (y + (15) * Math.sin(a) + (40) * Math.cos(a)));
        rocket.addPoint((int) (x + (15) * Math.cos(a) - (70) * Math.sin(a)), (int) (y + (15) * Math.sin(a) + (70) * Math.cos(a)));
        rocket.addPoint((int) (x + (7) * Math.cos(a) - (70) * Math.sin(a)), (int) (y + (7) * Math.sin(a) + (70) * Math.cos(a)));
        rocket.addPoint((int) (x + (7) * Math.cos(a) - (60) * Math.sin(a)), (int) (y + (7) * Math.sin(a) + (60) * Math.cos(a)));
        rocket.addPoint((int) (x + (-7) * Math.cos(a) - (60) * Math.sin(a)), (int) (y + (-7) * Math.sin(a) + (60) * Math.cos(a)));
        rocket.addPoint((int) (x + (-7) * Math.cos(a) - (70) * Math.sin(a)), (int) (y + (-7) * Math.sin(a) + (70) * Math.cos(a)));
        rocket.addPoint((int) (x + (-15) * Math.cos(a) - (70) * Math.sin(a)), (int) (y + (-15) * Math.sin(a) + (70) * Math.cos(a)));
        rocket.addPoint((int) (x + (-15) * Math.cos(a) - (40) * Math.sin(a)), (int) (y + (-15) * Math.sin(a) + (40) * Math.cos(a)));
        rocket.addPoint((int) (x + (-7) * Math.cos(a) - (35) * Math.sin(a)), (int) (y + (-7) * Math.sin(a) + (35) * Math.cos(a)));
        rocket.addPoint((int) (x + (-7) * Math.cos(a) - (10) * Math.sin(a)), (int) (y + (-7) * Math.sin(a) + (10) * Math.cos(a)));
        rocket.addPoint((int) (x), (int) (y));
    }

    @Override
    public void mouseDragged(MouseEvent me) {
        angle = Math.atan((double) (me.getY() - y1) / (double) (me.getX() - x1)) + Math.PI / 2;
        if ((me.getX() - x1) < 0) {
            angle += Math.PI;
        }
        mouseposX = me.getX();
        mouseposY = me.getY();
        repaint();
    }

    @Override
    public void mouseMoved(MouseEvent me) {
        angle = Math.atan((double) (me.getY() - y1) / (double) (me.getX() - x1)) + Math.PI / 2;
        if ((me.getX() - x1) < 0) {
            angle += Math.PI;
        }
        mouseposX = me.getX();
        mouseposY = me.getY();
        repaint();
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    

}
