/*
 * Catherine Takata 
 * Period 2
 * Final Project
 */

package catgame;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferStrategy;
import java.util.ArrayList;
import java.util.Random;
import javafx.geometry.Rectangle2D;
import javax.swing.JOptionPane;
import javax.swing.Timer;

public class CatGameForm extends javax.swing.JFrame implements KeyListener, MouseListener, MouseMotionListener, ActionListener {

    private final int WIDTH = 500, HEIGHT = 500, USERSTARTINGX = 15, GROUNDY = 500 - 30;
    private Random r = new Random();
    private ArrayList<Enemy> enemyList;
    private int userX, userY;
    private Rectangle2D userRect;
    private int catWidth = 90, catHeight = 54;
    private int score = 0;
    boolean isAlive = true, isMousePressed = false;
    private int timeMousePressed = 0;
    Stopwatch sw;
    Timer t, t2;
    
    
    ClassLoader cloader = CatGameForm.class.getClassLoader();
    Image me = Toolkit.getDefaultToolkit().getImage(cloader.getResource("cat.png"));
    Image backGround = Toolkit.getDefaultToolkit().getImage(cloader.getResource("background.jpg"));

    public CatGameForm() {
        initComponents();
        userRect = new Rectangle2D(userX, userY, catWidth, catHeight);
        enemyList = new ArrayList();
        userX = USERSTARTINGX;
        userY = GROUNDY - catHeight;
        this.addMouseListener(this);
        this.addKeyListener(this);
        this.addMouseMotionListener(this);
        this.setSize(WIDTH, HEIGHT);
        this.createBufferStrategy(2);
        ActionListener action = new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                doaction(ae);
            }
        };
        t = new Timer(10, action);
        ActionListener action2 = new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                doaction2(ae);
            }
        };
        t2 = new Timer(900, action2);
        sw = new Stopwatch();
        sw.Start();
        t.start();
        t2.start();
        //adds first bad guy
        this.addEnemies();
        this.setTitle("CATS");
    }

    private void doaction(ActionEvent ae) {
        //add gravity for characters and move incoming badguys
        //also moves enemies towards player
        //add enemies randomly

        //gravity for the user: if it is high than GROUNDY, then it decreases the user's y until it is back to the ground
        //timeMousePressed allows you to jump different heights to a maxiumum
        if (isMousePressed && (timeMousePressed < 50)) {
            userY -= 5;
            timeMousePressed++;
        } else if (userY + catHeight < GROUNDY) {
            userY += 4; //gravity: when not jumping brings userY back to ground
        }

        //resets timePressed
        if (!isMousePressed) {
            timeMousePressed = 0;
        }

        //moves enemy dogs and increased their speed over time
        for (Enemy b : enemyList) {
            b.move();
        }
        Enemy.addSpeed(0.00001);
        paintit();
    }

    private void doaction2(ActionEvent ae) {
//        Enemy.addSpeed(0.01);
        if (r.nextBoolean()) {
            addEnemies();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CatGameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CatGameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CatGameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CatGameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        JOptionPane.showConfirmDialog(null, "Welcome to The Cat Jumping Game created by Catherine Takata! "
                + "\n Use the mouse to make the cat jump over the dogs. \n Would you like to play?", "The Cat Jumping Game", 0, 1, null);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CatGameForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void paintit() {
        BufferStrategy bf = this.getBufferStrategy();
        Graphics g = bf.getDrawGraphics();
        g.clearRect(0, 0, 500, 500);
        g.drawImage(backGround, 0, 0, WIDTH, HEIGHT, this);
        this.setTitle("Score: " + score); 
        g.drawImage(me, userX, userY, this);
        g.drawLine(0, GROUNDY, 500, GROUNDY);
        userRect = new Rectangle2D(userX, userY, catWidth-15, catHeight-15);
        for (int i = enemyList.size() - 1; i >= 0; i--) {
            
            //draws bad guys from Enemy array list
            Enemy b = enemyList.get(i);
            g.drawImage(b.getImage(), b.getX(), b.getY(), this);
            
            //checks if enemies hit cat and ends game by stopping timer
            if (userRect.intersects(b.getRect())) { //catWidth/height will be the width adnn height of image/users rectangel hit box
                enemyList.remove(i);
                isAlive = false;
                t.stop();
                t2.stop();
                sw.Stop();
                JOptionPane.showMessageDialog(null, "You were caught!\nTime: " + sw.toString() + "\nScore: " + score);
                System.exit(0);
            } else if (b.getX() + b.getWidth() < 0) {
                score++;
                enemyList.remove(i);
            }
        }
        g.dispose();
        bf.show();
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        //this makes it so you are only able to jump from the ground and not mid air
        if (userY + catHeight >= GROUNDY - 3) {
            isMousePressed = true;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        isMousePressed = false;
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //this makes it so you are only able to jump from the ground and not mid air
        if (userY + catHeight >= GROUNDY - 3) {
            isMousePressed = true;
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        isMousePressed = false;
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mouseDragged(MouseEvent e) {
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }

    @Override
    public void actionPerformed(ActionEvent e) {
    }

    private void addEnemies() {
        if (enemyList.size() < 4) {
            enemyList.add(new Enemy(500, GROUNDY, r.nextBoolean())); 
        }
    }
}
